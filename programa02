package application;

import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.time.LocalDate;
import java.util.stream.Collectors;
import entities.*;

public class Programa {
    private static List<Partida> partidas = new ArrayList<>();

    // Função para escolher um time para a partida
    private static Time escolherTimeParaPartida(List<Time> times) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Escolha um time:");

        for (int i = 0; i < times.size(); i++) {
            System.out.println((i + 1) + ". " + times.get(i).getNome());
        }

        int escolha = sc.nextInt();
        
        // Garante que a escolha está dentro dos limites
        while (escolha < 1 || escolha > times.size()) {
            System.out.println("Escolha inválida. Tente novamente.");
            escolha = sc.nextInt();
        }

        return times.get(escolha - 1);
    }

    public static int exibirMenuInicial() {
        Scanner sc = new Scanner(System.in);

        System.out.println("Escolha uma opção:");
        System.out.println("1. Partidas");
        System.out.println("2. Tabela");

        int escolha = sc.nextInt();
        return escolha;
    }
    
    
    
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Campeonato c = new Campeonato();
        System.out.print("Digite o ID do campeonato: ");
        c.setId(sc.nextInt());
        System.out.print("Digite o ano do campeonato: ");
        c.setAno(sc.nextInt());
        System.out.print("Digite o nome do campeonato: ");
        sc.nextLine();
        c.setNome(sc.nextLine());
        System.out.println("Inclua 3 times no campeonato");

        List<Time> times = new ArrayList<>();
        List<Estadio> estadios = new ArrayList<>();

        for (int i = 0; i < 3; i++) {
            Time time = new Time();
            Estadio estadio = new Estadio();
            Endereco endereco = new Endereco();

            System.out.printf("\nDados sobre o time %d:\n\n", i + 1);
            System.out.printf("Id do %dº time: ", i + 1);
            time.setId(sc.nextInt());
            System.out.printf("Nome do %dº time: ", i + 1);
            sc.nextLine();
            time.setNome(sc.nextLine());

            System.out.printf("ID do estádio do time %d: ", i + 1);
            estadio.setId(sc.nextInt());
            System.out.printf("Nome do estádio do time %d: ", i + 1);
            sc.nextLine();
            estadio.setNome(sc.nextLine());

            System.out.print("ID do endereço do estádio: ");
            endereco.setId(sc.nextInt());
            System.out.print("Logradouro do estádio: ");
            sc.nextLine();
            endereco.setLagradouro(sc.nextLine());
            System.out.print("Número do estádio: ");
            endereco.setNumero(sc.nextInt());
            System.out.print("Bairro do estádio: ");
            sc.nextLine();
            endereco.setBairro(sc.nextLine());
            System.out.print("Complemento do endereço: ");
            endereco.setComplemento(sc.nextLine());

            estadio.setEndereco(endereco);
            time.setEstadio(estadio);

            boolean CapitaoEscolhido = false;

            for (int j = 0; j < 2; j++) {
                Jogador jogador = new Jogador();
                System.out.printf("\nId do %dº jogador do time %d: ", j + 1, i + 1);
                jogador.setId(sc.nextInt());
                System.out.printf("Nome do %dº jogador do time %d: ", j + 1, i + 1);
                sc.nextLine();
                jogador.setNome(sc.nextLine());
                System.out.printf("Gênero do %dº jogador do time %d: ", j + 1, i + 1);
                jogador.setGenero(sc.nextLine());
                System.out.printf("Data de nascimento do %dº jogador do time %d (no formato YYYY-MM-DD): ", j + 1, i + 1);
                jogador.setNascimento(LocalDate.parse(sc.nextLine()));
                System.out.printf("Altura do %dº jogador do time %d: ", j + 1, i + 1);
                jogador.setAltura(sc.nextDouble());
                System.out.print("\n");

                if (!CapitaoEscolhido) {
                    System.out.println("É o capitão do time? (Sim/Nao): ");
                    String statusCapitao = sc.next().toUpperCase();
                    if (statusCapitao.equals("SIM")) {
                        jogador.setStatus(Jogador.Cap.Sim);
                        CapitaoEscolhido = true;
                    } else {
                        jogador.setStatus(Jogador.Cap.Nao);
                    }
                } else {
                    jogador.setStatus(Jogador.Cap.Nao);
                }

                time.addJogador(jogador);
            }
            times.add(time);
            estadios.add(estadio);
        }

        // Configurar a lista de times no campeonato após o término do loop
        c.setTimes(times);
        // Organizar as partidas agora, pois a lista de times está configurada
        c.organizarPartidas();
        
        
        for (int i = 0; i < 6; i++) {
            List<Partida> partidasDisponiveis = c.getPartidas().stream()
                    .filter(partida -> partida.getData() == null)
                    .collect(Collectors.toList());

            if (!partidasDisponiveis.isEmpty()) {
                Partida p = partidasDisponiveis.get(0);

               
                System.out.println("Time Mandante: " + p.getTimeMandante().getNome());
                System.out.println("Time Visitante: " + p.getTimeVisitante().getNome());
                System.out.println("Local: " + p.getTimeMandante().getEstadio());

                
                System.out.print("ID da partida: ");
                p.setId(sc.nextInt());

                System.out.print("Data da partida (no formato YYYY-MM-DD): ");
                sc.nextLine(); 
                p.setData(LocalDate.parse(sc.nextLine()));

                System.out.print("Pontuação do time mandante: ");
                p.setPontmand(sc.nextInt());
                System.out.print("Pontuação do time visitante: ");
                p.setPontvisi(sc.nextInt());

                c.adicionarPartida(p);               
            }
        }
        
              
            		
       boolean continuarExecucao = true;

        while (continuarExecucao) {
            int escolha = exibirMenuInicial();
            		
     switch (escolha) {
             case 1:
            	for(Partida p : c.getPartidas()) {
            	  
            	  LocalDate hoje =LocalDate.now();
            		LocalDate dia = p.getData();
            		
            		if (dia != null) {
					if (dia.isBefore(hoje)) {
		                System.out.println("partida: " + p.getId() + " em " + dia + " já ocorreu.");
		            } else if (dia.isAfter(hoje)) {
		                System.out.println("Partida " + p.getId() + " em " + dia + " ainda vai acontecer.");
		            } else {
		                System.out.println("Hoje é o dia da partida " + p.getId()+ " em " + dia + "!");
		            }
            	  }
              }
            	
            	break;
            
            case 2:
                // Implemente a lógica para o menu de opções aqui
               
            	
            	break;
            
     
        default:
            System.out.println("Opção inválida. Escolha 1 ou 2.");
    }

            
       
        System.out.println("Deseja continuar? (Sim/Não)");
        String continuar = sc.next().toLowerCase();
        continuarExecucao = continuar.equals("sim");
        
    

            ///System.out.println("\n\nTime: " + time);
        }
        sc.close();
    }
}
